@page
@using AAI.Core
@using AAI.GenericChatInterface.Options
@using Microsoft.Extensions.Options
@model AAI.GenericChatInterface.Pages.Chat.IndexPageModel
@inject IOptions<GeneralOptions> GeneralOptionsValue

@{
    ViewData["Title"] = "Chat with AI Assistant";
}

<div id="app">
    <div class="row">
        <div class="col-12">
            <div class="mt-2 mb-2">
                Conversion Name: <b>{{ threadName }}</b> (<a asp-page="/Profile/ChatHistory">check history</a>) <br>
                Bot Mode: <b>@Model.UserSettings.BotMode.Name</b> (<a asp-page="/Profile/My">change mode</a>) 
            </div>
            <div class="float-end m-2">
                <v-btn size="large" density="compact"
                       :disabled="isLoading"
                       class="m-2" color="primary" prepend-icon="fas fa-plus"
                       v-on:click="createNewThread">
                    Create new thread
                </v-btn>
            </div>
        </div>
    </div>
    <div v-if="isLoading" class="m-5">
        <v-skeleton-loader :elevation="6" color="info" type="card-avatar"></v-skeleton-loader>
    </div>
    <div class="row chat-container" id="chatMessages">
        <div class="messages d-flex flex-column">
            <div v-for="item in items" :key="item.id" class="message"
                 :class="{user: item.messageType ==='user', assistant: item.messageType === 'assistant', system: item.messageType === 'system'}">
                {{ item.text }}
                <div class="timestamp">{{ item.timeStamp }}</div>
            </div>
            <div v-if="items.length === 0" class="text-center text-muted mt-5">
                No messages yet. Start the conversation by sending message to the server!
            </div>
        </div>
    </div>

    <div class="row input-box">
        <div class="col-12">
            <form v-on:submit.prevent="sendChatMessage">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Type your message here..."
                           v-model="messageText" required>
                    <v-btn type="submit"
                           :disabled="messageText.length <= 5"
                           elevation="4" size="large" color="primary"
                           prepend-icon="fa-solid fa-paper-plane"
                           v-on:click="sendChatMessage">
                        Send
                    </v-btn>
                </div>
                <div class="form-text text-muted">
                    <div v-if="messageText.length <= 5" class="text-danger">
                        Type at least 5 characters to send a message.
                    </div>
                    <div v-else>
                        {{ messageText.length }} / <b>@GeneralOptionsValue.Value.MessageLengthLimit</b>
                        characters typed.
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_VueJs")
    @await Html.PartialAsync("_Vuetify")
    <script>
        function loadDefaultData() {
            console.log('Loading default data for chat interface...');
            //set initial values from server-side variables
            apiBaseUrl.value = '@GeneralOptionsValue.Value.ApiBaseUrl';
            saveChatRoute.value = '@DataRoutes.SaveChatRoute';
            generateThreadRoute.value = '@DataRoutes.GenerateThreadNameRoute';
            loadThreadItemsRoute.value = '@DataRoutes.GetThreadDataRoute';
            apiChatRoute.value = '@GeneralRoutes.ChatRoute';
            email.value = '@User.Identity?.Name';
            // check if thread name is provided in the URL
            const url = new URL(window.location.href);
            // 1. Check query string (e.g., ?threadname=MyThread)
            let foundThreadName = url.searchParams.get('threadName');
            console.log('Found thread name in query:', foundThreadName);
            // 2. If not found in query, check the path (e.g., /Index/MyThread)
            if (!foundThreadName) {
                console.log('Found thread name in route:', foundThreadName);
                const pathSegments = url.pathname.split('/').filter(Boolean);
                const threadIndex = pathSegments.findIndex(segment => segment.toLowerCase() === 'index');
                if (threadIndex !== -1 && pathSegments.length > threadIndex + 1) {
                    threadName.value = pathSegments[threadIndex + 1];
                }                
            }
            else {
                threadName.value = '@StringHelper.GenerateUniqueName()';
            }
            loadThreadData();
        }
    </script>
    <script src="js/chats.js"></script>
}

@section Head
{
    @await Html.PartialAsync("_VuetifyStyles")
    <link href="/css/chat.css" rel="stylesheet">
}