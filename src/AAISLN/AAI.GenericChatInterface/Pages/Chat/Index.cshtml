@page
@using AAI.Core
@using AAI.GenericChatInterface.Options
@using Microsoft.Extensions.Options
@model AAI.GenericChatInterface.Pages.Chat.IndexPageModel
@inject IOptions<GeneralOptions> GeneralOptionsValue
@{
    ViewData["Title"] = "Chat with AI Assistant";
}

<div id="app">
    <div class="row">
        <div class="col-12">
            <div class="mt-2 mb-2">
                Conversion Name: <b>{{ threadName }}</b> (<a asp-page="/Profile/ChatHistory">check history</a>)
            </div>
            <div class="float-end mt-2 mb-2">
                <v-btn size="large" density="compact"
                       class="m-2" color="primary" prepend-icon="fas fa-plus"
                       v-on:click="createNewThread">
                    Create new thread
                </v-btn>
            </div>
        </div>
    </div>
    <div v-if="isLoading" class="m-5">
        <v-skeleton-loader :elevation="6" color="information" type="card"></v-skeleton-loader>
    </div>
    <div class="row chat-container" id="chatMessages">
        <div class="messages d-flex flex-column">
            <div v-for="item in items" :key="item.id" class="message"
                 :class="{user: item.type ==='user', assistant: item.type === 'assistant', system: item.type === 'system'}">
                {{ item.text }}
                <div class="timestamp">{{ item.timeStamp }}</div>
            </div>
            <div v-if="items.length === 0" class="text-center text-muted mt-5">
                No messages yet. Start the conversation by sending message to the server!
            </div>
        </div>
    </div>

    <div class="row input-box">
        <div class="col-12">
            <form v-on:submit.prevent="sendChatMessage">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Type your message here..."
                           v-model="messageText" required>
                    <v-btn type="submit"
                           :disabled="messageText.length <= 5"
                           elevation="4" size="large" color="primary"
                           prepend-icon="fa-solid fa-paper-plane"
                           v-on:click="sendChatMessage">
                        Send
                    </v-btn>
                </div>
                <div class="form-text text-muted">
                    <div v-if="messageText.length <= 5" class="text-danger">
                        Type at least 5 characters to send a message.
                    </div>
                    <div v-else>
                        {{ messageText.length }} / <b>@GeneralOptionsValue.Value.MessageLengthLimit</b>
                        characters typed.
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_VueJs")
    @await Html.PartialAsync("_Vuetify")
    <script>
        function loadDefaultData() {
            console.log('Loading default data for chat interface...');
            apiBaseUrl.value = '@GeneralOptionsValue.Value.ApiBaseUrl';
            saveChatRoute.value = '@DataRoutes.SaveChatRoute';
            generateThreadRoute.value = '@DataRoutes.GenerateThreadNameRoute';
            apiChatRoute.value = '@GeneralRoutes.ChatRoute';
            threadName.value = '@StringHelper.GenerateUniqueName()';
            email.value = '@User.Identity?.Name';
        }

        function createNewThread() {
            console.log('clearForm function called');
            isLoading.value = true;
            messageText.value = '';
            fetch(getThreadUrl.value)
                .then(response => {
                    if (!response.ok) {
                        console.log("There has been an error while fetching data from the server.");
                        isLoading.value = false;
                        items.value = [];
                        return Promise.reject(response);
                    }
                    return response.json(); // Parse the JSON from the response
                }).then(data => {
                console.log('Thread name generated successfully:', data);
                threadName.value = data;
                isLoading.value = false;
                items.value = [];
            }).catch(error => {
                console.error('Unable to generate thread names.', error);
                isLoading.value = false;
                items.value = [];
            });
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendChatMessage() {
            console.log('sendChatMessage function called');
            isLoading.value = true;
            let parentId = '';
            if (items.value.length > 0) {
                parentId = items.value[items.value.length - 1].id;
                console.log('Parent ID:', parentId);
            } else {
                console.log('No previous messages, no parent ID.');
            }
            let sendMessageItem = {
                email: email.value,
                text: messageText.value,
                threadName: threadName.value,
                parentId: parentId
            };
            fetch(saveChatUrl.value, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(sendMessageItem)
            }).then(response => {
                if (!response.ok) {
                    console.log("There has been an error while fetching data from the server.");
                    isLoading.value = false;
                    return Promise.reject(response);
                }
                console.log('Message sent successfully:', response);
                isLoading.value = false;
            });

            messageText.value = '';
        }
    </script>
    <script src="js/chats.js"></script>
}

@section Head
{
    @await Html.PartialAsync("_VuetifyStyles")
    <link href="/css/chat.css" rel="stylesheet">
}